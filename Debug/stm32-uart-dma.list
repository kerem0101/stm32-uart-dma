
stm32-uart-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003300  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b4  080034b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034bc  080034bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  080034d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080034d0  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cfa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158f  00000000  00000000  00028d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0002a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148a5  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008462  00000000  00000000  0003f875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081003  00000000  00000000  00047cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a8c  00000000  00000000  000c8d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800347c 	.word	0x0800347c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800347c 	.word	0x0800347c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fac0 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f810 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8cc 	bl	8000674 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f8a2 	bl	8000624 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f876 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, rx_buff, 5);
 80004e4:	2205      	movs	r2, #5
 80004e6:	4902      	ldr	r1, [pc, #8]	; (80004f0 <main+0x24>)
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <main+0x28>)
 80004ea:	f001 ff31 	bl	8002350 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x22>
 80004f0:	20000028 	.word	0x20000028
 80004f4:	200000f0 	.word	0x200000f0

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 ffb0 	bl	800346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xd0>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <SystemClock_Config+0xd0>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SystemClock_Config+0xd0>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <SystemClock_Config+0xd4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd4>)
 8000546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800056c:	2310      	movs	r3, #16
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000576:	2304      	movs	r3, #4
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f9a4 	bl	80018d0 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f8fb 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fc06 	bl	8001dc0 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ba:	f000 f8e5 	bl	8000788 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART2_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_USART2_UART_Init+0x4c>)
 8000608:	f001 fdd6 	bl	80021b8 <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000612:	f000 f8b9 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000f0 	.word	0x200000f0
 8000620:	40004400 	.word	0x40004400

08000624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_DMA_Init+0x4c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <MX_DMA_Init+0x4c>)
 8000634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_DMA_Init+0x4c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2010      	movs	r0, #16
 800064c:	f000 fb4f 	bl	8000cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000650:	2010      	movs	r0, #16
 8000652:	f000 fb68 	bl	8000d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2011      	movs	r0, #17
 800065c:	f000 fb47 	bl	8000cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000660:	2011      	movs	r0, #17
 8000662:	f000 fb60 	bl	8000d26 <HAL_NVIC_EnableIRQ>

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <MX_GPIO_Init+0xd0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_GPIO_Init+0xd0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a25      	ldr	r2, [pc, #148]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <MX_GPIO_Init+0xd4>)
 8000700:	f001 f8b2 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_GPIO_Init+0xd8>)
 800071c:	f000 ff20 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000720:	2320      	movs	r3, #32
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_GPIO_Init+0xd4>)
 8000738:	f000 ff12 	bl	8001560 <HAL_GPIO_Init>

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020000 	.word	0x40020000
 800074c:	40020800 	.word	0x40020800

08000750 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit_DMA(&huart2, rx_buff, 5);
 8000758:	2205      	movs	r2, #5
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <HAL_UART_RxCpltCallback+0x2c>)
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <HAL_UART_RxCpltCallback+0x30>)
 800075e:	f001 fd79 	bl	8002254 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart2, rx_buff, 5);
 8000762:	2205      	movs	r2, #5
 8000764:	4905      	ldr	r1, [pc, #20]	; (800077c <HAL_UART_RxCpltCallback+0x2c>)
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <HAL_UART_RxCpltCallback+0x30>)
 8000768:	f001 fdf2 	bl	8002350 <HAL_UART_Receive_DMA>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800076c:	2120      	movs	r1, #32
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_UART_RxCpltCallback+0x34>)
 8000770:	f001 f893 	bl	800189a <HAL_GPIO_TogglePin>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000028 	.word	0x20000028
 8000780:	200000f0 	.word	0x200000f0
 8000784:	40020000 	.word	0x40020000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a8:	6453      	str	r3, [r2, #68]	; 0x44
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_MspInit+0x4c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 fa80 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a4b      	ldr	r2, [pc, #300]	; (8000930 <HAL_UART_MspInit+0x14c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	f040 8090 	bne.w	8000928 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	4b49      	ldr	r3, [pc, #292]	; (8000934 <HAL_UART_MspInit+0x150>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a48      	ldr	r2, [pc, #288]	; (8000934 <HAL_UART_MspInit+0x150>)
 8000812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b46      	ldr	r3, [pc, #280]	; (8000934 <HAL_UART_MspInit+0x150>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b42      	ldr	r3, [pc, #264]	; (8000934 <HAL_UART_MspInit+0x150>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	4a41      	ldr	r2, [pc, #260]	; (8000934 <HAL_UART_MspInit+0x150>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6313      	str	r3, [r2, #48]	; 0x30
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <HAL_UART_MspInit+0x150>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000840:	230c      	movs	r3, #12
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000850:	2307      	movs	r3, #7
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4837      	ldr	r0, [pc, #220]	; (8000938 <HAL_UART_MspInit+0x154>)
 800085c:	f000 fe80 	bl	8001560 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000860:	4b36      	ldr	r3, [pc, #216]	; (800093c <HAL_UART_MspInit+0x158>)
 8000862:	4a37      	ldr	r2, [pc, #220]	; (8000940 <HAL_UART_MspInit+0x15c>)
 8000864:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <HAL_UART_MspInit+0x158>)
 8000868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800086e:	4b33      	ldr	r3, [pc, #204]	; (800093c <HAL_UART_MspInit+0x158>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <HAL_UART_MspInit+0x158>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <HAL_UART_MspInit+0x158>)
 800087c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000880:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000882:	4b2e      	ldr	r3, [pc, #184]	; (800093c <HAL_UART_MspInit+0x158>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <HAL_UART_MspInit+0x158>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800088e:	4b2b      	ldr	r3, [pc, #172]	; (800093c <HAL_UART_MspInit+0x158>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <HAL_UART_MspInit+0x158>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <HAL_UART_MspInit+0x158>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008a0:	4826      	ldr	r0, [pc, #152]	; (800093c <HAL_UART_MspInit+0x158>)
 80008a2:	f000 fa5b 	bl	8000d5c <HAL_DMA_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80008ac:	f7ff ff6c 	bl	8000788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a22      	ldr	r2, [pc, #136]	; (800093c <HAL_UART_MspInit+0x158>)
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <HAL_UART_MspInit+0x158>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008be:	4a22      	ldr	r2, [pc, #136]	; (8000948 <HAL_UART_MspInit+0x164>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <HAL_UART_MspInit+0x160>)
 80008fe:	f000 fa2d 	bl	8000d5c <HAL_DMA_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000908:	f7ff ff3e 	bl	8000788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <HAL_UART_MspInit+0x160>)
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
 8000912:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <HAL_UART_MspInit+0x160>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2026      	movs	r0, #38	; 0x26
 800091e:	f000 f9e6 	bl	8000cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000922:	2026      	movs	r0, #38	; 0x26
 8000924:	f000 f9ff 	bl	8000d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	20000030 	.word	0x20000030
 8000940:	40026088 	.word	0x40026088
 8000944:	20000090 	.word	0x20000090
 8000948:	400260a0 	.word	0x400260a0

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f8ae 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <DMA1_Stream5_IRQHandler+0x10>)
 80009a6:	f000 fb71 	bl	800108c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000030 	.word	0x20000030

080009b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <DMA1_Stream6_IRQHandler+0x10>)
 80009ba:	f000 fb67 	bl	800108c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000090 	.word	0x20000090

080009c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USART2_IRQHandler+0x10>)
 80009ce:	f001 fcef 	bl	80023b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000f0 	.word	0x200000f0

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a2a:	f7ff ffd7 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 fcf9 	bl	8003424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fd4b 	bl	80004cc <main>
  bx  lr    
 8000a36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a44:	080034c4 	.word	0x080034c4
  ldr r2, =_sbss
 8000a48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a4c:	20000138 	.word	0x20000138

08000a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <HAL_Init+0x40>)
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_Init+0x40>)
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x40>)
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f92b 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fe84 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f943 	bl	8000d42 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f90b 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000134 	.word	0x20000134

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000134 	.word	0x20000134

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff29 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff3e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff31 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa2 	bl	8000c94 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff feda 	bl	8000b20 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e099      	b.n	8000eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d98:	e00f      	b.n	8000dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d9a:	f7ff fec1 	bl	8000b20 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d908      	bls.n	8000dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e078      	b.n	8000eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e8      	bne.n	8000d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_DMA_Init+0x158>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d107      	bne.n	8000e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f023 0307 	bic.w	r3, r3, #7
 8000e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d117      	bne.n	8000e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00e      	beq.n	8000e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fb01 	bl	8001468 <DMA_CheckFifoParam>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2240      	movs	r2, #64	; 0x40
 8000e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e016      	b.n	8000eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fab8 	bl	80013fc <DMA_CalcBaseAndBitshift>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e94:	223f      	movs	r2, #63	; 0x3f
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	f010803f 	.word	0xf010803f

08000eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d101      	bne.n	8000ede <HAL_DMA_Start_IT+0x26>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e040      	b.n	8000f60 <HAL_DMA_Start_IT+0xa8>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d12f      	bne.n	8000f52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 fa4a 	bl	80013a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f10:	223f      	movs	r2, #63	; 0x3f
 8000f12:	409a      	lsls	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0216 	orr.w	r2, r2, #22
 8000f26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e005      	b.n	8000f5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f76:	f7ff fdd3 	bl	8000b20 <HAL_GetTick>
 8000f7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d008      	beq.n	8000f9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e052      	b.n	8001040 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0216 	bic.w	r2, r2, #22
 8000fa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <HAL_DMA_Abort+0x62>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0208 	bic.w	r2, r2, #8
 8000fd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fea:	e013      	b.n	8001014 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fec:	f7ff fd98 	bl	8000b20 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d90c      	bls.n	8001014 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2203      	movs	r2, #3
 8001004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e015      	b.n	8001040 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1e4      	bne.n	8000fec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	223f      	movs	r2, #63	; 0x3f
 8001028:	409a      	lsls	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d004      	beq.n	8001066 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00c      	b.n	8001080 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2205      	movs	r2, #5
 800106a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001098:	4b92      	ldr	r3, [pc, #584]	; (80012e4 <HAL_DMA_IRQHandler+0x258>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a92      	ldr	r2, [pc, #584]	; (80012e8 <HAL_DMA_IRQHandler+0x25c>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0a9b      	lsrs	r3, r3, #10
 80010a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b6:	2208      	movs	r2, #8
 80010b8:	409a      	lsls	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01a      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0204 	bic.w	r2, r2, #4
 80010de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e4:	2208      	movs	r2, #8
 80010e6:	409a      	lsls	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fc:	2201      	movs	r2, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d012      	beq.n	800112e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	2201      	movs	r2, #1
 800111c:	409a      	lsls	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001126:	f043 0202 	orr.w	r2, r3, #2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001132:	2204      	movs	r2, #4
 8001134:	409a      	lsls	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d012      	beq.n	8001164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001150:	2204      	movs	r2, #4
 8001152:	409a      	lsls	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115c:	f043 0204 	orr.w	r2, r3, #4
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	2210      	movs	r2, #16
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d043      	beq.n	80011fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d03c      	beq.n	80011fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	2210      	movs	r2, #16
 8001188:	409a      	lsls	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d018      	beq.n	80011ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d108      	bne.n	80011bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d024      	beq.n	80011fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	4798      	blx	r3
 80011ba:	e01f      	b.n	80011fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d01b      	beq.n	80011fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
 80011cc:	e016      	b.n	80011fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d107      	bne.n	80011ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0208 	bic.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001200:	2220      	movs	r2, #32
 8001202:	409a      	lsls	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 808e 	beq.w	800132a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 8086 	beq.w	800132a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001222:	2220      	movs	r2, #32
 8001224:	409a      	lsls	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b05      	cmp	r3, #5
 8001234:	d136      	bne.n	80012a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0216 	bic.w	r2, r2, #22
 8001244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	695a      	ldr	r2, [r3, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <HAL_DMA_IRQHandler+0x1da>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0208 	bic.w	r2, r2, #8
 8001274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	223f      	movs	r2, #63	; 0x3f
 800127c:	409a      	lsls	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001296:	2b00      	cmp	r3, #0
 8001298:	d07d      	beq.n	8001396 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4798      	blx	r3
        }
        return;
 80012a2:	e078      	b.n	8001396 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d01c      	beq.n	80012ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d108      	bne.n	80012d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d030      	beq.n	800132a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
 80012d0:	e02b      	b.n	800132a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d027      	beq.n	800132a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
 80012e2:	e022      	b.n	800132a <HAL_DMA_IRQHandler+0x29e>
 80012e4:	20000000 	.word	0x20000000
 80012e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0210 	bic.w	r2, r2, #16
 8001308:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	2b00      	cmp	r3, #0
 8001330:	d032      	beq.n	8001398 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d022      	beq.n	8001384 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2205      	movs	r2, #5
 8001342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	429a      	cmp	r2, r3
 8001360:	d307      	bcc.n	8001372 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f2      	bne.n	8001356 <HAL_DMA_IRQHandler+0x2ca>
 8001370:	e000      	b.n	8001374 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001372:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	4798      	blx	r3
 8001394:	e000      	b.n	8001398 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001396:	bf00      	nop
    }
  }
}
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop

080013a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b40      	cmp	r3, #64	; 0x40
 80013cc:	d108      	bne.n	80013e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013de:	e007      	b.n	80013f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3b10      	subs	r3, #16
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <DMA_CalcBaseAndBitshift+0x64>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001416:	4a13      	ldr	r2, [pc, #76]	; (8001464 <DMA_CalcBaseAndBitshift+0x68>)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d909      	bls.n	800143e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	1d1a      	adds	r2, r3, #4
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	659a      	str	r2, [r3, #88]	; 0x58
 800143c:	e007      	b.n	800144e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	aaaaaaab 	.word	0xaaaaaaab
 8001464:	080034ac 	.word	0x080034ac

08001468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d11f      	bne.n	80014c2 <DMA_CheckFifoParam+0x5a>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d856      	bhi.n	8001536 <DMA_CheckFifoParam+0xce>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <DMA_CheckFifoParam+0x28>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014a1 	.word	0x080014a1
 8001494:	080014b3 	.word	0x080014b3
 8001498:	080014a1 	.word	0x080014a1
 800149c:	08001537 	.word	0x08001537
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d046      	beq.n	800153a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b0:	e043      	b.n	800153a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014ba:	d140      	bne.n	800153e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014c0:	e03d      	b.n	800153e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ca:	d121      	bne.n	8001510 <DMA_CheckFifoParam+0xa8>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d837      	bhi.n	8001542 <DMA_CheckFifoParam+0xda>
 80014d2:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <DMA_CheckFifoParam+0x70>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	080014ef 	.word	0x080014ef
 80014e0:	080014e9 	.word	0x080014e9
 80014e4:	08001501 	.word	0x08001501
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
      break;
 80014ec:	e030      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d025      	beq.n	8001546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014fe:	e022      	b.n	8001546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001508:	d11f      	bne.n	800154a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800150e:	e01c      	b.n	800154a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d903      	bls.n	800151e <DMA_CheckFifoParam+0xb6>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d003      	beq.n	8001524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800151c:	e018      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
      break;
 8001522:	e015      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00e      	beq.n	800154e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
      break;
 8001534:	e00b      	b.n	800154e <DMA_CheckFifoParam+0xe6>
      break;
 8001536:	bf00      	nop
 8001538:	e00a      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      break;
 800153a:	bf00      	nop
 800153c:	e008      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      break;
 800153e:	bf00      	nop
 8001540:	e006      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      break;
 8001542:	bf00      	nop
 8001544:	e004      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      break;
 8001546:	bf00      	nop
 8001548:	e002      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      break;   
 800154a:	bf00      	nop
 800154c:	e000      	b.n	8001550 <DMA_CheckFifoParam+0xe8>
      break;
 800154e:	bf00      	nop
    }
  } 
  
  return status; 
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	e159      	b.n	8001830 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	429a      	cmp	r2, r3
 8001596:	f040 8148 	bne.w	800182a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d005      	beq.n	80015b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d130      	bne.n	8001614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 0201 	and.w	r2, r3, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b03      	cmp	r3, #3
 800161e:	d017      	beq.n	8001650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d123      	bne.n	80016a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3208      	adds	r2, #8
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0203 	and.w	r2, r3, #3
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a2 	beq.w	800182a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_GPIO_Init+0x2e8>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a56      	ldr	r2, [pc, #344]	; (8001848 <HAL_GPIO_Init+0x2e8>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b54      	ldr	r3, [pc, #336]	; (8001848 <HAL_GPIO_Init+0x2e8>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001702:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x2ec>)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a49      	ldr	r2, [pc, #292]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x202>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_GPIO_Init+0x2f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x1fe>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_GPIO_Init+0x2f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x1fa>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a46      	ldr	r2, [pc, #280]	; (800185c <HAL_GPIO_Init+0x2fc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x1f6>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a45      	ldr	r2, [pc, #276]	; (8001860 <HAL_GPIO_Init+0x300>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x1f2>
 800174e:	2304      	movs	r3, #4
 8001750:	e008      	b.n	8001764 <HAL_GPIO_Init+0x204>
 8001752:	2307      	movs	r3, #7
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x204>
 8001756:	2303      	movs	r3, #3
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x204>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x204>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x204>
 8001762:	2300      	movs	r3, #0
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_GPIO_Init+0x2ec>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_GPIO_Init+0x304>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d0:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_GPIO_Init+0x304>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_GPIO_Init+0x304>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_GPIO_Init+0x304>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	f67f aea2 	bls.w	800157c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40013800 	.word	0x40013800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40013c00 	.word	0x40013c00

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	4613      	mov	r3, r2
 8001876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001884:	e003      	b.n	800188e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	041a      	lsls	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	041a      	lsls	r2, r3, #16
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	400b      	ands	r3, r1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e264      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d075      	beq.n	80019da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ee:	4ba3      	ldr	r3, [pc, #652]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d00c      	beq.n	8001914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4ba0      	ldr	r3, [pc, #640]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001902:	2b08      	cmp	r3, #8
 8001904:	d112      	bne.n	800192c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b9d      	ldr	r3, [pc, #628]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001912:	d10b      	bne.n	800192c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	4b99      	ldr	r3, [pc, #612]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d05b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x108>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d157      	bne.n	80019d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e23f      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x74>
 8001936:	4b91      	ldr	r3, [pc, #580]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e01d      	b.n	8001980 <HAL_RCC_OscConfig+0xb0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x98>
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a8a      	ldr	r2, [pc, #552]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xb0>
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a83      	ldr	r2, [pc, #524]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a80      	ldr	r2, [pc, #512]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f8ca 	bl	8000b20 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f8c6 	bl	8000b20 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e204      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b76      	ldr	r3, [pc, #472]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0xc0>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f8b6 	bl	8000b20 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff f8b2 	bl	8000b20 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1f0      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0xe8>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d063      	beq.n	8001aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b62      	ldr	r3, [pc, #392]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d11c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fe:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d116      	bne.n	8001a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x152>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1c4      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4952      	ldr	r1, [pc, #328]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	e03a      	b.n	8001aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_RCC_OscConfig+0x2b0>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f86b 	bl	8000b20 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f867 	bl	8000b20 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1a5      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4940      	ldr	r1, [pc, #256]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x2b0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f84a 	bl	8000b20 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a90:	f7ff f846 	bl	8000b20 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e184      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d030      	beq.n	8001b1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f82a 	bl	8000b20 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f826 	bl	8000b20 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e164      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x200>
 8001aee:	e015      	b.n	8001b1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f813 	bl	8000b20 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff f80f 	bl	8000b20 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e14d      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80a0 	beq.w	8001c6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x2b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d121      	bne.n	8001baa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_RCC_OscConfig+0x2b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_RCC_OscConfig+0x2b8>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7fe ffd5 	bl	8000b20 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e011      	b.n	8001b9e <HAL_RCC_OscConfig+0x2ce>
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	42470000 	.word	0x42470000
 8001b84:	42470e80 	.word	0x42470e80
 8001b88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7fe ffc8 	bl	8000b20 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e106      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_OscConfig+0x4e4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
 8001bb2:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a80      	ldr	r2, [pc, #512]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x32a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x312>
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x32a>
 8001be2:	4b75      	ldr	r3, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a74      	ldr	r2, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a71      	ldr	r2, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7fe ff8d 	bl	8000b20 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe ff89 	bl	8000b20 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0c5      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x33a>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7fe ff77 	bl	8000b20 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7fe ff73 	bl	8000b20 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0af      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b5a      	ldr	r3, [pc, #360]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a55      	ldr	r2, [pc, #340]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 809b 	beq.w	8001daa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d05c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d141      	bne.n	8001d0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <HAL_RCC_OscConfig+0x4ec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ff47 	bl	8000b20 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe ff43 	bl	8000b20 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e081      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	019b      	lsls	r3, r3, #6
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	061b      	lsls	r3, r3, #24
 8001cd8:	4937      	ldr	r1, [pc, #220]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <HAL_RCC_OscConfig+0x4ec>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ff1c 	bl	8000b20 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ff18 	bl	8000b20 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e056      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x41c>
 8001d0a:	e04e      	b.n	8001daa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x4ec>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe ff05 	bl	8000b20 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe ff01 	bl	8000b20 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e03f      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x44a>
 8001d38:	e037      	b.n	8001daa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e032      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d028      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d121      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d11a      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d111      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40007000 	.word	0x40007000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	42470060 	.word	0x42470060

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cc      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d90c      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d044      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e067      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4934      	ldr	r1, [pc, #208]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fe36 	bl	8000b20 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7fe fe32 	bl	8000b20 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e04f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fd96 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08003494 	.word	0x08003494
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fa4:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d00d      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x40>
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	f200 80bd 	bhi.w	8002130 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fbe:	e0b7      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fc2:	60bb      	str	r3, [r7, #8]
       break;
 8001fc4:	e0b7      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc6:	4b61      	ldr	r3, [pc, #388]	; (800214c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fc8:	60bb      	str	r3, [r7, #8]
      break;
 8001fca:	e0b4      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fcc:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d04d      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe2:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	099b      	lsrs	r3, r3, #6
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	ea02 0800 	and.w	r8, r2, r0
 8001ffa:	ea03 0901 	and.w	r9, r3, r1
 8001ffe:	4640      	mov	r0, r8
 8002000:	4649      	mov	r1, r9
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	014b      	lsls	r3, r1, #5
 800200c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002010:	0142      	lsls	r2, r0, #5
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	ebb0 0008 	subs.w	r0, r0, r8
 800201a:	eb61 0109 	sbc.w	r1, r1, r9
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	018b      	lsls	r3, r1, #6
 8002028:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800202c:	0182      	lsls	r2, r0, #6
 800202e:	1a12      	subs	r2, r2, r0
 8002030:	eb63 0301 	sbc.w	r3, r3, r1
 8002034:	f04f 0000 	mov.w	r0, #0
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	00d9      	lsls	r1, r3, #3
 800203e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002042:	00d0      	lsls	r0, r2, #3
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	eb12 0208 	adds.w	r2, r2, r8
 800204c:	eb43 0309 	adc.w	r3, r3, r9
 8002050:	f04f 0000 	mov.w	r0, #0
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	0259      	lsls	r1, r3, #9
 800205a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800205e:	0250      	lsls	r0, r2, #9
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	f7fe f8b0 	bl	80001d4 <__aeabi_uldivmod>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4613      	mov	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e04a      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	461a      	mov	r2, r3
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	ea02 0400 	and.w	r4, r2, r0
 8002096:	ea03 0501 	and.w	r5, r3, r1
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	014b      	lsls	r3, r1, #5
 80020a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020ac:	0142      	lsls	r2, r0, #5
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	1b00      	subs	r0, r0, r4
 80020b4:	eb61 0105 	sbc.w	r1, r1, r5
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	018b      	lsls	r3, r1, #6
 80020c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020c6:	0182      	lsls	r2, r0, #6
 80020c8:	1a12      	subs	r2, r2, r0
 80020ca:	eb63 0301 	sbc.w	r3, r3, r1
 80020ce:	f04f 0000 	mov.w	r0, #0
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	00d9      	lsls	r1, r3, #3
 80020d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020dc:	00d0      	lsls	r0, r2, #3
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	1912      	adds	r2, r2, r4
 80020e4:	eb45 0303 	adc.w	r3, r5, r3
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	0299      	lsls	r1, r3, #10
 80020f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020f6:	0290      	lsls	r0, r2, #10
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f7fe f864 	bl	80001d4 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	60bb      	str	r3, [r7, #8]
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002132:	60bb      	str	r3, [r7, #8]
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	68bb      	ldr	r3, [r7, #8]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	007a1200 	.word	0x007a1200

08002150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a9b      	lsrs	r3, r3, #10
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	080034a4 	.word	0x080034a4

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffdc 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0b5b      	lsrs	r3, r3, #13
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	080034a4 	.word	0x080034a4

080021b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e03f      	b.n	800224a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fb00 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 ff49 	bl	8003094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d165      	bne.n	800233a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_UART_Transmit_DMA+0x26>
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e05e      	b.n	800233c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_UART_Transmit_DMA+0x38>
 8002288:	2302      	movs	r3, #2
 800228a:	e057      	b.n	800233c <HAL_UART_Transmit_DMA+0xe8>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	88fa      	ldrh	r2, [r7, #6]
 800229e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2221      	movs	r2, #33	; 0x21
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_UART_Transmit_DMA+0xf0>)
 80022ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	4a21      	ldr	r2, [pc, #132]	; (8002348 <HAL_UART_Transmit_DMA+0xf4>)
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_UART_Transmit_DMA+0xf8>)
 80022ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	2200      	movs	r2, #0
 80022d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80022d4:	f107 0308 	add.w	r3, r7, #8
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3304      	adds	r3, #4
 80022e8:	461a      	mov	r2, r3
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	f7fe fde4 	bl	8000eb8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3314      	adds	r3, #20
 8002308:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	e853 3f00 	ldrex	r3, [r3]
 8002310:	617b      	str	r3, [r7, #20]
   return(result);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3314      	adds	r3, #20
 8002320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002322:	627a      	str	r2, [r7, #36]	; 0x24
 8002324:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002326:	6a39      	ldr	r1, [r7, #32]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	e841 2300 	strex	r3, r2, [r1]
 800232e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e5      	bne.n	8002302 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	08002935 	.word	0x08002935
 8002348:	080029cf 	.word	0x080029cf
 800234c:	08002b47 	.word	0x08002b47

08002350 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	d11d      	bne.n	80023a6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_UART_Receive_DMA+0x26>
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e016      	b.n	80023a8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_UART_Receive_DMA+0x38>
 8002384:	2302      	movs	r3, #2
 8002386:	e00f      	b.n	80023a8 <HAL_UART_Receive_DMA+0x58>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	461a      	mov	r2, r3
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fc1d 	bl	8002bdc <UART_Start_Receive_DMA>
 80023a2:	4603      	mov	r3, r0
 80023a4:	e000      	b.n	80023a8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0ba      	sub	sp, #232	; 0xe8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_UART_IRQHandler+0x66>
 8002402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fd85 	bl	8002f1e <UART_Receive_IT>
      return;
 8002414:	e256      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80de 	beq.w	80025dc <HAL_UART_IRQHandler+0x22c>
 8002420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800242c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002430:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80d1 	beq.w	80025dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_UART_IRQHandler+0xae>
 8002446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_UART_IRQHandler+0xd2>
 800246a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0202 	orr.w	r2, r3, #2
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0xf6>
 800248e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f043 0204 	orr.w	r2, r3, #4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d011      	beq.n	80024d6 <HAL_UART_IRQHandler+0x126>
 80024b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0208 	orr.w	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 81ed 	beq.w	80028ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_UART_IRQHandler+0x14e>
 80024ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fd10 	bl	8002f1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_UART_IRQHandler+0x17a>
 8002522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d04f      	beq.n	80025ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fc18 	bl	8002d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d141      	bne.n	80025c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3314      	adds	r3, #20
 8002544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800255c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800256a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800256e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800257a:	e841 2300 	strex	r3, r2, [r1]
 800257e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1d9      	bne.n	800253e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	2b00      	cmp	r3, #0
 8002590:	d013      	beq.n	80025ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a7d      	ldr	r2, [pc, #500]	; (800278c <HAL_UART_IRQHandler+0x3dc>)
 8002598:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fd52 	bl	8001048 <HAL_DMA_Abort_IT>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b4:	4610      	mov	r0, r2
 80025b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	e00e      	b.n	80025d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f9a4 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c0:	e00a      	b.n	80025d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f9a0 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	e006      	b.n	80025d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f99c 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025d6:	e170      	b.n	80028ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	bf00      	nop
    return;
 80025da:	e16e      	b.n	80028ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	f040 814a 	bne.w	800287a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8143 	beq.w	800287a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 813c 	beq.w	800287a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	f040 80b4 	bne.w	8002790 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8140 	beq.w	80028be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002646:	429a      	cmp	r2, r3
 8002648:	f080 8139 	bcs.w	80028be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002652:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265e:	f000 8088 	beq.w	8002772 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800268e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800269a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1d9      	bne.n	8002662 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3314      	adds	r3, #20
 80026b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3314      	adds	r3, #20
 80026ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026de:	e841 2300 	strex	r3, r2, [r1]
 80026e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1e1      	bne.n	80026ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3314      	adds	r3, #20
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3314      	adds	r3, #20
 800270a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800270e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800271c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e3      	bne.n	80026ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	330c      	adds	r3, #12
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002742:	f023 0310 	bic.w	r3, r3, #16
 8002746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002754:	65ba      	str	r2, [r7, #88]	; 0x58
 8002756:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800275a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e3      	bne.n	8002730 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fbfb 	bl	8000f68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800277a:	b29b      	uxth	r3, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8ca 	bl	800291c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002788:	e099      	b.n	80028be <HAL_UART_IRQHandler+0x50e>
 800278a:	bf00      	nop
 800278c:	08002e27 	.word	0x08002e27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002798:	b29b      	uxth	r3, r3
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 808b 	beq.w	80028c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80027ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8086 	beq.w	80028c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	330c      	adds	r3, #12
 80027d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027da:	647a      	str	r2, [r7, #68]	; 0x44
 80027dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e3      	bne.n	80027b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3314      	adds	r3, #20
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	623b      	str	r3, [r7, #32]
   return(result);
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3314      	adds	r3, #20
 800280e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002812:	633a      	str	r2, [r7, #48]	; 0x30
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e3      	bne.n	80027ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	e853 3f00 	ldrex	r3, [r3]
 8002842:	60fb      	str	r3, [r7, #12]
   return(result);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002858:	61fa      	str	r2, [r7, #28]
 800285a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	69b9      	ldr	r1, [r7, #24]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	e841 2300 	strex	r3, r2, [r1]
 8002864:	617b      	str	r3, [r7, #20]
   return(result);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e3      	bne.n	8002834 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800286c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f852 	bl	800291c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002878:	e023      	b.n	80028c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800287a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_UART_IRQHandler+0x4ea>
 8002886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fadb 	bl	8002e4e <UART_Transmit_IT>
    return;
 8002898:	e014      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <HAL_UART_IRQHandler+0x514>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fb1b 	bl	8002eee <UART_EndTransmit_IT>
    return;
 80028b8:	e004      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
    return;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
      return;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <HAL_UART_IRQHandler+0x514>
      return;
 80028c2:	bf00      	nop
  }
}
 80028c4:	37e8      	adds	r7, #232	; 0xe8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop

080028cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	; 0x40
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d137      	bne.n	80029c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	2200      	movs	r2, #0
 8002954:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	623b      	str	r3, [r7, #32]
   return(result);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002976:	633a      	str	r2, [r7, #48]	; 0x30
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800297c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e5      	bne.n	8002956 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	60fb      	str	r3, [r7, #12]
   return(result);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
 80029a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029aa:	61fa      	str	r2, [r7, #28]
 80029ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	617b      	str	r3, [r7, #20]
   return(result);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e5      	bne.n	800298a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029be:	e002      	b.n	80029c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80029c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029c2:	f7ff ff83 	bl	80028cc <HAL_UART_TxCpltCallback>
}
 80029c6:	bf00      	nop
 80029c8:	3740      	adds	r7, #64	; 0x40
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff ff7f 	bl	80028e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b09c      	sub	sp, #112	; 0x70
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d172      	bne.n	8002aec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e5      	bne.n	8002a0c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a60:	647a      	str	r2, [r7, #68]	; 0x44
 8002a62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3314      	adds	r3, #20
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	623b      	str	r3, [r7, #32]
   return(result);
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a94:	633a      	str	r2, [r7, #48]	; 0x30
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9c:	e841 2300 	strex	r3, r2, [r1]
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e5      	bne.n	8002a74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d119      	bne.n	8002aec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	e853 3f00 	ldrex	r3, [r3]
 8002ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0310 	bic.w	r3, r3, #16
 8002ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ad8:	61fa      	str	r2, [r7, #28]
 8002ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	e841 2300 	strex	r3, r2, [r1]
 8002ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e5      	bne.n	8002ab8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002af8:	4619      	mov	r1, r3
 8002afa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002afc:	f7ff ff0e 	bl	800291c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b00:	e002      	b.n	8002b08 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002b02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002b04:	f7fd fe24 	bl	8000750 <HAL_UART_RxCpltCallback>
}
 8002b08:	bf00      	nop
 8002b0a:	3770      	adds	r7, #112	; 0x70
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d108      	bne.n	8002b38 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4619      	mov	r1, r3
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fef3 	bl	800291c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b36:	e002      	b.n	8002b3e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff fedb 	bl	80028f4 <HAL_UART_RxHalfCpltCallback>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b21      	cmp	r3, #33	; 0x21
 8002b78:	d108      	bne.n	8002b8c <UART_DMAError+0x46>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	f000 f8c2 	bl	8002d10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b22      	cmp	r3, #34	; 0x22
 8002bac:	d108      	bne.n	8002bc0 <UART_DMAError+0x7a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002bba:	68b8      	ldr	r0, [r7, #8]
 8002bbc:	f000 f8d0 	bl	8002d60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f043 0210 	orr.w	r2, r3, #16
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bcc:	68b8      	ldr	r0, [r7, #8]
 8002bce:	f7ff fe9b 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b098      	sub	sp, #96	; 0x60
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2222      	movs	r2, #34	; 0x22
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <UART_Start_Receive_DMA+0x128>)
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	4a3d      	ldr	r2, [pc, #244]	; (8002d08 <UART_Start_Receive_DMA+0x12c>)
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	4a3c      	ldr	r2, [pc, #240]	; (8002d0c <UART_Start_Receive_DMA+0x130>)
 8002c1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	2200      	movs	r2, #0
 8002c22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	f7fe f93c 	bl	8000eb8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e5      	bne.n	8002c5e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3314      	adds	r3, #20
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	657b      	str	r3, [r7, #84]	; 0x54
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cb2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e5      	bne.n	8002c92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8002ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e5      	bne.n	8002cc6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3760      	adds	r7, #96	; 0x60
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	080029eb 	.word	0x080029eb
 8002d08:	08002b11 	.word	0x08002b11
 8002d0c:	08002b47 	.word	0x08002b47

08002d10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	61ba      	str	r2, [r7, #24]
 8002d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	613b      	str	r3, [r7, #16]
   return(result);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002d54:	bf00      	nop
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b095      	sub	sp, #84	; 0x54
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d88:	643a      	str	r2, [r7, #64]	; 0x40
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d119      	bne.n	8002e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 0310 	bic.w	r3, r3, #16
 8002dee:	647b      	str	r3, [r7, #68]	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df8:	61ba      	str	r2, [r7, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	613b      	str	r3, [r7, #16]
   return(result);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e5      	bne.n	8002dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e1a:	bf00      	nop
 8002e1c:	3754      	adds	r7, #84	; 0x54
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff fd61 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b21      	cmp	r3, #33	; 0x21
 8002e60:	d13e      	bne.n	8002ee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	d114      	bne.n	8002e96 <UART_Transmit_IT+0x48>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d110      	bne.n	8002e96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	1c9a      	adds	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	621a      	str	r2, [r3, #32]
 8002e94:	e008      	b.n	8002ea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6211      	str	r1, [r2, #32]
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10f      	bne.n	8002edc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fcdc 	bl	80028cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b08c      	sub	sp, #48	; 0x30
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b22      	cmp	r3, #34	; 0x22
 8002f30:	f040 80ab 	bne.w	800308a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3c:	d117      	bne.n	8002f6e <UART_Receive_IT+0x50>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d113      	bne.n	8002f6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f6c:	e026      	b.n	8002fbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f80:	d007      	beq.n	8002f92 <UART_Receive_IT+0x74>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <UART_Receive_IT+0x82>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e008      	b.n	8002fb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d15a      	bne.n	8003086 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0220 	bic.w	r2, r2, #32
 8002fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	2b01      	cmp	r3, #1
 800300e:	d135      	bne.n	800307c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	613b      	str	r3, [r7, #16]
   return(result);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f023 0310 	bic.w	r3, r3, #16
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	623a      	str	r2, [r7, #32]
 8003038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303a:	69f9      	ldr	r1, [r7, #28]
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	61bb      	str	r3, [r7, #24]
   return(result);
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e5      	bne.n	8003016 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d10a      	bne.n	800306e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fc51 	bl	800291c <HAL_UARTEx_RxEventCallback>
 800307a:	e002      	b.n	8003082 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7fd fb67 	bl	8000750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e002      	b.n	800308c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3730      	adds	r7, #48	; 0x30
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003098:	b09f      	sub	sp, #124	; 0x7c
 800309a:	af00      	add	r7, sp, #0
 800309c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	68d9      	ldr	r1, [r3, #12]
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	ea40 0301 	orr.w	r3, r0, r1
 80030b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	431a      	orrs	r2, r3
 80030c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030d8:	f021 010c 	bic.w	r1, r1, #12
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e2:	430b      	orrs	r3, r1
 80030e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f2:	6999      	ldr	r1, [r3, #24]
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	ea40 0301 	orr.w	r3, r0, r1
 80030fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4bc5      	ldr	r3, [pc, #788]	; (8003418 <UART_SetConfig+0x384>)
 8003104:	429a      	cmp	r2, r3
 8003106:	d004      	beq.n	8003112 <UART_SetConfig+0x7e>
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4bc3      	ldr	r3, [pc, #780]	; (800341c <UART_SetConfig+0x388>)
 800310e:	429a      	cmp	r2, r3
 8003110:	d103      	bne.n	800311a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003112:	f7ff f83d 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8003116:	6778      	str	r0, [r7, #116]	; 0x74
 8003118:	e002      	b.n	8003120 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800311a:	f7ff f825 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 800311e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003128:	f040 80b6 	bne.w	8003298 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800312c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312e:	461c      	mov	r4, r3
 8003130:	f04f 0500 	mov.w	r5, #0
 8003134:	4622      	mov	r2, r4
 8003136:	462b      	mov	r3, r5
 8003138:	1891      	adds	r1, r2, r2
 800313a:	6439      	str	r1, [r7, #64]	; 0x40
 800313c:	415b      	adcs	r3, r3
 800313e:	647b      	str	r3, [r7, #68]	; 0x44
 8003140:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003144:	1912      	adds	r2, r2, r4
 8003146:	eb45 0303 	adc.w	r3, r5, r3
 800314a:	f04f 0000 	mov.w	r0, #0
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	00d9      	lsls	r1, r3, #3
 8003154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003158:	00d0      	lsls	r0, r2, #3
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	1911      	adds	r1, r2, r4
 8003160:	6639      	str	r1, [r7, #96]	; 0x60
 8003162:	416b      	adcs	r3, r5
 8003164:	667b      	str	r3, [r7, #100]	; 0x64
 8003166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	1891      	adds	r1, r2, r2
 8003172:	63b9      	str	r1, [r7, #56]	; 0x38
 8003174:	415b      	adcs	r3, r3
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800317c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003180:	f7fd f828 	bl	80001d4 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4ba5      	ldr	r3, [pc, #660]	; (8003420 <UART_SetConfig+0x38c>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011e      	lsls	r6, r3, #4
 8003192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003194:	461c      	mov	r4, r3
 8003196:	f04f 0500 	mov.w	r5, #0
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6339      	str	r1, [r7, #48]	; 0x30
 80031a2:	415b      	adcs	r3, r3
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
 80031a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031aa:	1912      	adds	r2, r2, r4
 80031ac:	eb45 0303 	adc.w	r3, r5, r3
 80031b0:	f04f 0000 	mov.w	r0, #0
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	00d9      	lsls	r1, r3, #3
 80031ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031be:	00d0      	lsls	r0, r2, #3
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	1911      	adds	r1, r2, r4
 80031c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80031c8:	416b      	adcs	r3, r5
 80031ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80031da:	415b      	adcs	r3, r3
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031e6:	f7fc fff5 	bl	80001d4 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4b8c      	ldr	r3, [pc, #560]	; (8003420 <UART_SetConfig+0x38c>)
 80031f0:	fba3 1302 	umull	r1, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	3332      	adds	r3, #50	; 0x32
 8003202:	4a87      	ldr	r2, [pc, #540]	; (8003420 <UART_SetConfig+0x38c>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003210:	441e      	add	r6, r3
 8003212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003214:	4618      	mov	r0, r3
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	1894      	adds	r4, r2, r2
 8003220:	623c      	str	r4, [r7, #32]
 8003222:	415b      	adcs	r3, r3
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800322a:	1812      	adds	r2, r2, r0
 800322c:	eb41 0303 	adc.w	r3, r1, r3
 8003230:	f04f 0400 	mov.w	r4, #0
 8003234:	f04f 0500 	mov.w	r5, #0
 8003238:	00dd      	lsls	r5, r3, #3
 800323a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800323e:	00d4      	lsls	r4, r2, #3
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	1814      	adds	r4, r2, r0
 8003246:	653c      	str	r4, [r7, #80]	; 0x50
 8003248:	414b      	adcs	r3, r1
 800324a:	657b      	str	r3, [r7, #84]	; 0x54
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	461a      	mov	r2, r3
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	1891      	adds	r1, r2, r2
 8003258:	61b9      	str	r1, [r7, #24]
 800325a:	415b      	adcs	r3, r3
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003262:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003266:	f7fc ffb5 	bl	80001d4 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <UART_SetConfig+0x38c>)
 8003270:	fba3 1302 	umull	r1, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	2164      	movs	r1, #100	; 0x64
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	3332      	adds	r3, #50	; 0x32
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <UART_SetConfig+0x38c>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	f003 0207 	and.w	r2, r3, #7
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4432      	add	r2, r6
 8003294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003296:	e0b9      	b.n	800340c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329a:	461c      	mov	r4, r3
 800329c:	f04f 0500 	mov.w	r5, #0
 80032a0:	4622      	mov	r2, r4
 80032a2:	462b      	mov	r3, r5
 80032a4:	1891      	adds	r1, r2, r2
 80032a6:	6139      	str	r1, [r7, #16]
 80032a8:	415b      	adcs	r3, r3
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032b0:	1912      	adds	r2, r2, r4
 80032b2:	eb45 0303 	adc.w	r3, r5, r3
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	00d9      	lsls	r1, r3, #3
 80032c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c4:	00d0      	lsls	r0, r2, #3
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	eb12 0804 	adds.w	r8, r2, r4
 80032ce:	eb43 0905 	adc.w	r9, r3, r5
 80032d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	008b      	lsls	r3, r1, #2
 80032e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032ea:	0082      	lsls	r2, r0, #2
 80032ec:	4640      	mov	r0, r8
 80032ee:	4649      	mov	r1, r9
 80032f0:	f7fc ff70 	bl	80001d4 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b49      	ldr	r3, [pc, #292]	; (8003420 <UART_SetConfig+0x38c>)
 80032fa:	fba3 2302 	umull	r2, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	011e      	lsls	r6, r3, #4
 8003302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003304:	4618      	mov	r0, r3
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	1894      	adds	r4, r2, r2
 8003310:	60bc      	str	r4, [r7, #8]
 8003312:	415b      	adcs	r3, r3
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800331a:	1812      	adds	r2, r2, r0
 800331c:	eb41 0303 	adc.w	r3, r1, r3
 8003320:	f04f 0400 	mov.w	r4, #0
 8003324:	f04f 0500 	mov.w	r5, #0
 8003328:	00dd      	lsls	r5, r3, #3
 800332a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800332e:	00d4      	lsls	r4, r2, #3
 8003330:	4622      	mov	r2, r4
 8003332:	462b      	mov	r3, r5
 8003334:	1814      	adds	r4, r2, r0
 8003336:	64bc      	str	r4, [r7, #72]	; 0x48
 8003338:	414b      	adcs	r3, r1
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4618      	mov	r0, r3
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	008b      	lsls	r3, r1, #2
 8003350:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003354:	0082      	lsls	r2, r0, #2
 8003356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800335a:	f7fc ff3b 	bl	80001d4 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <UART_SetConfig+0x38c>)
 8003364:	fba3 1302 	umull	r1, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2164      	movs	r1, #100	; 0x64
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	3332      	adds	r3, #50	; 0x32
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <UART_SetConfig+0x38c>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003382:	441e      	add	r6, r3
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	4618      	mov	r0, r3
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	1894      	adds	r4, r2, r2
 8003392:	603c      	str	r4, [r7, #0]
 8003394:	415b      	adcs	r3, r3
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800339c:	1812      	adds	r2, r2, r0
 800339e:	eb41 0303 	adc.w	r3, r1, r3
 80033a2:	f04f 0400 	mov.w	r4, #0
 80033a6:	f04f 0500 	mov.w	r5, #0
 80033aa:	00dd      	lsls	r5, r3, #3
 80033ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033b0:	00d4      	lsls	r4, r2, #3
 80033b2:	4622      	mov	r2, r4
 80033b4:	462b      	mov	r3, r5
 80033b6:	eb12 0a00 	adds.w	sl, r2, r0
 80033ba:	eb43 0b01 	adc.w	fp, r3, r1
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033d6:	0082      	lsls	r2, r0, #2
 80033d8:	4650      	mov	r0, sl
 80033da:	4659      	mov	r1, fp
 80033dc:	f7fc fefa 	bl	80001d4 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <UART_SetConfig+0x38c>)
 80033e6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	; 0x32
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <UART_SetConfig+0x38c>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4432      	add	r2, r6
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	377c      	adds	r7, #124	; 0x7c
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40011000 	.word	0x40011000
 800341c:	40011400 	.word	0x40011400
 8003420:	51eb851f 	.word	0x51eb851f

08003424 <__libc_init_array>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4d0d      	ldr	r5, [pc, #52]	; (800345c <__libc_init_array+0x38>)
 8003428:	4c0d      	ldr	r4, [pc, #52]	; (8003460 <__libc_init_array+0x3c>)
 800342a:	1b64      	subs	r4, r4, r5
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	2600      	movs	r6, #0
 8003430:	42a6      	cmp	r6, r4
 8003432:	d109      	bne.n	8003448 <__libc_init_array+0x24>
 8003434:	4d0b      	ldr	r5, [pc, #44]	; (8003464 <__libc_init_array+0x40>)
 8003436:	4c0c      	ldr	r4, [pc, #48]	; (8003468 <__libc_init_array+0x44>)
 8003438:	f000 f820 	bl	800347c <_init>
 800343c:	1b64      	subs	r4, r4, r5
 800343e:	10a4      	asrs	r4, r4, #2
 8003440:	2600      	movs	r6, #0
 8003442:	42a6      	cmp	r6, r4
 8003444:	d105      	bne.n	8003452 <__libc_init_array+0x2e>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	f855 3b04 	ldr.w	r3, [r5], #4
 800344c:	4798      	blx	r3
 800344e:	3601      	adds	r6, #1
 8003450:	e7ee      	b.n	8003430 <__libc_init_array+0xc>
 8003452:	f855 3b04 	ldr.w	r3, [r5], #4
 8003456:	4798      	blx	r3
 8003458:	3601      	adds	r6, #1
 800345a:	e7f2      	b.n	8003442 <__libc_init_array+0x1e>
 800345c:	080034bc 	.word	0x080034bc
 8003460:	080034bc 	.word	0x080034bc
 8003464:	080034bc 	.word	0x080034bc
 8003468:	080034c0 	.word	0x080034c0

0800346c <memset>:
 800346c:	4402      	add	r2, r0
 800346e:	4603      	mov	r3, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	d100      	bne.n	8003476 <memset+0xa>
 8003474:	4770      	bx	lr
 8003476:	f803 1b01 	strb.w	r1, [r3], #1
 800347a:	e7f9      	b.n	8003470 <memset+0x4>

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
